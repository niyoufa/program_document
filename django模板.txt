Django模板
1. 模板占位符、模板标签、过滤器

2. Django模板系统基本规则 ：写模板、创建Template对象、创建Context，调用render（）方法。

3. django模板中遍历复杂数据结构的关键是句点字符（.）
（1）通过句点可以访问字典的键的值，
（2）可以访问对象属性
（3）引用对象的无参数方法
（4）访问列表索引
支持多级深度嵌套

4. context对象

5. 在自定义的对象中定义布尔值属性

6. 写一个自己的模板语言

7. 在视图中使用模板
（1）视图加载模板文件
（2）模板自加载和模板目录
django.template.loader.get_template（）方法加载模块返回一个编译好的Template对象
（3）django.shortcuts模块下
         render_to_response方法
         render方法
（4）locals（）返回一个局部变量名称和值的字典

8. include模板标签
使用模板加载机制的内建模板标签
对相同的代码进行定义实现代码复用

9. 模板继承
对不同的代码进行定义实现重载
｛% extends %｝定义继承的父模板
｛% block %｝ 子模块可以重载的部分

继承不会影响模板的上下文

10. 模板继承设计的三层法
1. 创建base.html模板，定义站点的主观感受
2. 为站点的每个区域创建base_section.html
3. 为每个区域创建独立的模板


11. RequestContext和Context处理器
1. 
from django.template import loader, Context

def view_1(request):
    # ...
    t = loader.get_template('template1.html')
    c = Context({
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR'],
        'message': 'I am view 1.'
    })
    return t.render(c)

from django.template import loader, RequestContext
def custom_proc(request):
    "A context processor that provides 'app', 'user' and 'ip_address'."
    return {
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR']
    }

def view_1(request):
    # ...
    t = loader.get_template('template1.html')
    c = RequestContext(request, {'message': 'I am view 1.'},
            processors=[custom_proc])
    return t.render(c)

2. 
from django.shortcuts import render_to_response
from django.template import RequestContext

def custom_proc(request):
    "A context processor that provides 'app', 'user' and 'ip_address'."
    return {
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR']
    }

def view_1(request):
    # ...
    return render_to_response('template1.html',
        {'message': 'I am view 1.'},
        context_instance=RequestContext(request, processors=[custom_proc]))

3. 
from django.shortcuts import render_to_response
from django.template import RequestContext

def custom_proc(request):
    "A context processor that provides 'app', 'user' and 'ip_address'."
    return {
        'app': 'My app',
        'user': request.user,
        'ip_address': request.META['REMOTE_ADDR']
    }

def view_1(request):
    # ...
    return render_to_response('template1.html',
        {'message': 'I am view 1.'},
        context_instance=RequestContext(request, processors=[custom_proc]))

12. Django提供对 全局 context处理器的支持。 TEMPLATE_CONTEXT_PROCESSORS 指定了哪些context processors总是默认被使用。
默认情况下， TEMPLATE_CONTEXT_PROCESSORS 设置如下：
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
)

13. 被跨域脚本 (XSS) 攻击
